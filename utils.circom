
pragma circom 2.0.3;

template Switcher() {
    signal input sel;
    signal input L;
    signal input R;
    signal output outL;
    signal output outR;

    signal aux;

    aux <== (R-L)*sel;    // We create aux in order to have only one multiplication
    outL <==  aux + L;
    outR <== -aux + R;
}

template Multiplier2 () {  

    // Declaration of signals.  
    signal input in1;  
    signal input in2;  
    signal output out;  
    
    // Constraints.  
    out <== in1 * in2;  
}
     
template MultiplierN (N){
    //Declaration of signals and components.
    signal input in[N];
    signal output out;
    component comp[N-1];

    //Statements.
    for(var i = 0; i < N-1; i++){
        comp[i] = Multiplier2();
    }

        comp[0].in1 <== in[0];
        comp[0].in2 <== in[1];
        for(var i = 0; i < N-2; i++){
        comp[i+1].in1 <== comp[i].out;
        comp[i+1].in2 <== in[i+2]; 
        }
        out <== comp[N-2].out; 
}

template Poseidon4() {
    signal input in1;
    signal input in2;
    signal input in3; 
    signal input in4; 

    signal output out; 

    component p = Poseidon(4);
    p.inputs[0] <== in1;
    p.inputs[1] <== in2;
    p.inputs[2] <== in3;
    p.inputs[3] <== in4;

    out <== p.out;
}

template PoseidonMulti(N) {
    signal input in[N];
    signal input blind;
    signal output out;

    var nHashes = N\3;

    component hashes[nHashes];

    for (var i = 0; i < nHashes;i++) { 
        hashes[i] = Poseidon4();
    }

    var cursor = 0;
    hashes[0].in1 <== blind; 
    hashes[0].in2 <== in[0];
    hashes[0].in3 <== in[1];
    hashes[0].in4 <== in[2];
    
    cursor+=2;

    for (var i = 0; i < nHashes-1; i++) {
        hashes[i+1].in1 <== hashes[i].out;
        hashes[i+1].in2 <== in[cursor+1];
        hashes[i+1].in3 <== in[cursor+2];
        hashes[i+1].in4 <== in[cursor+3];
        cursor+=3;
    }

    var rem = N%3;
    if (rem==0) {
        out <== hashes[nHashes-1].out;
    } else {
        component final = Poseidon(rem+1);
        final.inputs[0] <== hashes[nHashes-1].out;
        for (var i=1; i<=rem; i++) { 
            final.inputs[i] <== in[cursor+i];
        }
        out <== final.out;
        
    }

}

template IsZero() {
    signal input in;
    signal output out;
    signal inv;
    inv <-- in!=0 ? 1/in : 0;
    out <== -in*inv +1;
    in*out === 0;
}
function rootsTrans(i) {
	var roots[1536] = [12829,4513,15253,11341,15215,8425,5281,6361,7369,2401,6181,9733,11809,14641,16486,14845,13117,1585,12733,16198,15337,1273,9805,8233,13441,16474,4117,7729,3973,2281,6145,6469,7693,9325,10477,11101,10525,2305,3829,7921,12337,15442,9313,15682,16150,16558,6697,7873,17389,17545,10309,5485,15598,1873,2413,9229,12853,15550,13405,13777,16642,16957,481,17461,2197,3877,11197,12589,7525,2353,1309,13141,13417,18061,1453,49,721,12925,7237,1849,17113,1357,17353,16714,11257,13009,13921,17473,385,8341,9925,12061,7585,3709,2089,12157,8569,5161,5233,10561,2761,4033,4645,7861,9049,10957,14281,8209,16522,9373,4273,217,9253,4717,8821,8041,5776,8557,9025,9781,12721,14245,15634,18277,6529,6565,10909,13681,5989,15121,6049,17458,13,15898,6877,17017,1369,4981,15790,1693,4705,18385,7057,4525,16786,529,1081,15946,10105,15922,12985,1573,7309,15454,13849,145,7681,10993,3997,13021,16678,16798,8413,9865,8689,13465,5761,14053,18325,1333,7513,6817,2005,15382,14521,17413,8461,8221,9337,12301,2665,7969,5725,9301,14386,14857,14869,5785,4417,7033,16294,9757,8101,13645,6157,7117,14449,11137,16390,8929,1201,13249,4933,5473,9241,15502,6781,8749,1285,8125,12241,361,11425,13993,17761,2029,13381,3733,16969,17221,5941,9937,4021,9625,3937,2437,10177,14353,6349,6925,733,6805,12565,17185,3685,1249,8737,4549,10873,15838,2833,15466,12205,4789,5017,5545,1489,1825,5605,5185,18121,9517,241,16450,10453,10585,8329,14233,15013,13717,12049,15862,13561,16426,3613,12229,6205,253,973,10777,11905,17881,15754,17677,11737,229,3313,1837,3913,2929,5713,15241,8641,2845,10393,12481,16378,15289,7609,3301,13453,7717,11497,12949,16762,1009,8809,10549,15730,13609,757,3229,13933,5977,3865,6613,1729,697,4285,7081,1801,2977,8977,14077,15514,7201,12793,14593,17509,5641,11449,11521,12433,3901,8437,12457,9709,1537,12781,14125,8785,12577,14509,15133,4849,4729,17077,3925,11125,14293,18229,6829,16414,37,8869,6577,6937,17989,1513,3133,6961,8257,13369,7633,13357,14725,5617,4189,5749,8833,4621,15430,16222,18421,4465,1765,6481,14497,17041,18181,9097,12253,12409,12529,8005,10165,14017,2473,11725,17089,13573,10273,14305,13189,12349,13741,3001,493,14221,7549,6373,2053,961,11569,10045,16933,5593,11941,6433,16993,2821,9433,2269,11653,11953,13321,12517,3337,9481,8761,15958,17689,5917,14413,4321,5125,277,16030,6889,6973,4069,10945,17977,925,16897,17641,6637,9961,15394,10705,289,3157,9109,15193,13261,8905,10213,3961,13285,15025,12109,8053,10081,13969,8305,577,11077,17905,2173,10669,12085,5257,5413,1645,8665,6745,14329,3793,15802,15169,13213,16510,1153,445,25,4873,3889,16858,14569,7705,16534,12769,15478,16066,2533,11581,16822,3745,4381,205,3757,11065,5965,4765,4837,2521,5221,2629,6685,7285,8281,11989,9661,8845,8893,1993,14341,16090,15037,10513,10189,8401,5665,6313,11245,17737,17749,5905,7129,7933,16114,2641,2257,13873,11749,8725,17305,13621,457,313,829,9121,18337,7501,3817,5005,373,8173,11857,337,877,2737,3469,17281,9829,16702,505,14257,3037,865,997,5437,14821,11185,1753,11797,2149,15970,16882,5341,709,8617,2389,9697,15658,13729,6757,10297,12217,11593,5881,2893,5461,7225,613,10357,16666,17293,13525,6493,11533,13861,11113,11917,4057,15766,1885,8377,14989,4165,12181,409,7333,18361,9889,15001,7597,6385,9613,1166,6085,2041,6901,853,3121,2605,3697,9409,15694,14761,14833,16210,13801,12277,8581,9037,11269,4597,12020,16186,13705,11233,5353,1921,2509,1069,4297,5389,4885,5653,6649,12493,15934,14101,17065,8677,18349,2065,13177,12169,7813,10729,1321,6217,553,16774,7345,8137,13393,6337,17617,5845,1657,4777,10237,13273,9745,6673,4129,6949,2497,17377,15145,6265,18145,10633,15706,4825,9277,793,10441,7789,12325,2797,7009,10765,11365,8089,2593,11893,16810,13549,1345,1969,2317,5041,8029,16138,3289,3505,11161,4693,13093,11293,7657,8701,5701,5557,17713,10117,85,6241,14605,8497,1909,2965,649,6409,9085,11401,9289,14701,4429,9169,11461,7189,5401,2725,2953,4237,9457,14473,17317,13669,16306,9265,6097,1501,6913,2617,17149,16162,2809,6997,3265,4225,8473,11089,11413,6553,15265,4633,11389,16894,10753,8545,15157,6865,9769,9541,13225,10369,1381,17701,2881,16054,11485,6769,8293,9493,169,2293,9361,11473,14317,15109,14425,16981,18217,6601,7177,1525,11821,2773,13429,7825,11317,10933,14161,3481,3013,9589,13981,11281,14653,7297,3253,14557,3073,7093,8989,6037,5209,1945,421,8533,17773,5569,13513,12361,16366,6853,6397,10249,14113,15490,14437,14917,15406,17725,17833,11617,6841,15586,817,16234,7393,17845,16618,13957,1681,157,11881,16102,517,16258,841,14629,2785,7045,3109,4249,16582,14029,14269,10645,565,12709,5245,8953,12841,13897,11605,913,3325,17869,18301,8017,2749,1957,7897,8773,301,16078,3169,8149,15610,4153,12913,10741,5113,12889,13837,14677,2689,1117,10615,7561,12505,3181,9421,9385,5173,14209,10681,15061,12601,4969,12193,6001,15874,13345,13069,3577,10849,3517,5929,9901,5425,15526,4681,4741,15982,16354,901,5269,4993,15814,17665,181,2449,10345,4573,11149,16174,1393,2545,16654,11869,8941,3661,14185,14089,16846,5857,8077,625,3097,13489,1057,6133,9001,2857,17329,12901,17005,10465,12037,16690,4081,2101,5677,15085,9841,8113,7537,16018,1177,11845,8269,13657,9205,4561,3433,15301,4369,1297,7213,11017,10429,13885,12673,18397,13585,4441,6301,3421,10897,12001,14977,18253,18289,805,10789,16738,4801,10021,2113,3145,4909,14953,1549,6541,10573,7105,7837,2161,16594,4009,9138,5521,601,6421,6709,7885,8881,9349,9853,10009,10489,13033,17425,17797,5317,16498,14929,17857,12817,15313,12145,16270,11005,2125,2989,17053,193,9565,9793,13333,15670,17497,1429,7801,4105,10597,2341,10885,9985,11509,6325,4489,5509,2017,10201,14149,5293,12313,469,2917,8389,9529,12661,15778,16630,17401,2557,3601,1933,17257,18133,3361,12097,1213,14617,16921,10321,4213,3769,1633,11557,12649,3217,6733,17533,121,4141,15049,11965,12397,3781,11713,17269,9157,17137,18313,11305,10225,1789,13753,10069,673,3553,11221,9193,1225,9949,11377,61,3673,11329,17893,1705,14581,6289,12625,6277,11173,14737,7573,1417,3985,13129,541,1105,17593,5149,9877,17953,9145,2329,11785,14749,97,9997,9073,3805,13297,3565,14809,5737,9505,11437,5821,16126,5365,12757,11041,10921,16546,2245,1141,4609,6061,16402,1741,8917,16462,17209,5449,15181,8245,8485,3193,11029,14173,12445,2425,3409,8593,11677,5053,11833,12937,18046,12133,5869,6985,12025,13201,18169,15277,13045,7249,10261,10825,17485,637,8605,18241,2365,13165,4501,3349,14713,7489,12613,3061,10381,4357,8797,13485,11665,18085,5377,5689,12961,7957,10693,985,13057,4945,6121,10837,17809,7069,8065,769,3649,5101,1813,10405,12289,949,5953,6109,6589,9601,1405,6013,3049,10141,10717,9217,12469,3589,6505,16870,2941,18097,13153,7141,9445,1981,6721,7273,8185,12373,8857,4537,9685,18373,9817,13789,10981,7765,16282,13597,7669,8449,2209,8365,18193,4045,589,18157,11053,9061,14773,325,14374,17941,7381,12385,15073,1129,8197,10057,16438,1861,16042,5089,4753,10969,10129,14893,9721,5533,10657,5797,73,11977,3541,5077,9397,16750,1093,9637,12973,18001,7477,14005,15562,10537,4657,15622,17341,6025,9913,14197,15229,10801,7849,14401,2077,781,2677,2701,6445,6517,13945,14797,17521,18013,3529,1597,4585,4405,1441,4261,18049,5197,14665,10285,18073,13693,13825,9181,17197,2461,4093,1237,12745,17029,6229,18109,17161,3457,7405,8965,12637,12805,17233,15097,4395,9013,9553,1033,7153,2581,15850,6793,3373,17605,16006,16318,4333,12073,6169,15538,133,11929,17821,3625,11761,4345,4921,17929,4201,1621,3205,3949,4177,4957,8653,11689,5581,14785,9469,14065,4861,7165,12553,15370,14881,17245,17653,7981,5893,11545,7261,10501,15886,12877,15418,5329,14905,10033,14545,397,3853,11629,15994,15325,15349,685,2569,11209,14485,2653,5305,13813,7445,17785,17581,15574,6661,15718,6253,16246,7465,15742,11701,2377,12421,4477,1669,7909,5029,10093,17629,13309,10153,15646,1897,17365,9577,17557,17917,18409,745,7945,16342,5809,3445,9673,18025,1609,5065,7021,3841,15910,14533,13765,7645,1477,14689,10861,10333,12121,18265,8713,937,4669,12685,7753,13081,2221,12997,13909,16726,265,433,6073,8521,13633,1777,2869,5137,8317,10417,5629,13105,16330,14974,11773,14389,1189,3385,16834,8161,17101,5833,7429,1561,12865,8509,12541,18205,11353,3721,16570,7621,7777,7993,17125,7453,13237,7321,2485,10813,2137,2905,109,3493,661,3637,13537,16909,9649,3241,4813,15826,3025,6193,349,3277,16945,10621,7417,8353,1021,6457,3397,13501,12697,6625,17173,1465,889,8629,3085,2185,17446,2713,17569,4453,1261,14461,11641,9973,16606,1717,2233,5497,1,14941,14041,1045,4897,7357,14137,4309,7741,17965,15217,12265];
	return roots[i];
    }
function rootsMatch(i) {
	var roots[1] = [10];
	return roots[i];
    }
