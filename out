dfa: DFA {
    ab: "a",
    chars: {
        'a': 0,
    },
    states: {
        Empty: 2,
        Char('a'): 0,
        Nil: 1,
    },
    trans: {
        (
            Nil,
            'a',
            Empty,
        ),
        (
            Empty,
            'a',
            Empty,
        ),
        (
            Char('a'),
            'a',
            Nil,
        ),
    },
}
Pre-opt R1cs size: 1
Final R1cs size: 0
r1cs: R1cs {
    modulus: IntField(
        28948022309329048855892746252171976963363056481941647379679742748393362948097,
    ),
    signal_idxs: {
        "next_state_n0": 0,
    },
    idxs_signals: {
        0: "next_state_n0",
    },
    next_idx: 1,
    public_idxs: {},
    constraints: [],
    terms: [
        (declare
         (
          (next_state (mod 28948022309329048855892746252171976963363056481941647379679742748393362948097))
         )
         (let
          (
          )
          
        next_state)
        )
        ,
    ],
}
Producing public parameters...
drop dead var: next_state_n0
CIRC CS []
Number of constraints (primary circuit): 9816
Number of constraints (secondary circuit): 10347
Number of variables (primary circuit): 9812
Number of variables (secondary circuit): 10329
Doc len is 2
prover_data ProverData {
    r1cs: R1cs {
        modulus: IntField(
            28948022309329048855892746252171976963363056481941647379679742748393362948097,
        ),
        signal_idxs: {
            "next_state_n0": 0,
        },
        idxs_signals: {
            0: "next_state_n0",
        },
        next_idx: 1,
        public_idxs: {},
        constraints: [],
        terms: [
            (declare
             (
              (next_state (mod 28948022309329048855892746252171976963363056481941647379679742748393362948097))
             )
             (let
              (
              )
              
            next_state)
            )
            ,
        ],
    },
    precompute_inputs: {},
    precompute: PreComp {
        outputs: {
            "next_state_n0": (declare
             (
              (next_state (mod 28948022309329048855892746252171976963363056481941647379679742748393362948097))
             )
             (let
              (
              )
              
            next_state)
            )
            ,
        },
        sequence: [
            (
                "next_state_n0",
                Field(
                    IntField(
                        28948022309329048855892746252171976963363056481941647379679742748393362948097,
                    ),
                ),
            ),
        ],
        inputs: {
            (
                "next_state",
                Field(
                    IntField(
                        28948022309329048855892746252171976963363056481941647379679742748393362948097,
                    ),
                ),
            ),
        },
    },
}
wits {
    "char": Field(
        IntField(
            IntField {
                i: 0,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
    "next_state": Field(
        IntField(
            IntField {
                i: 1,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
    "current_state": Field(
        IntField(
            IntField {
                i: 0,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
}
extended wit {
    "next_state_n0": Field(
        IntField(
            IntField {
                i: 1,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
    "current_state": Field(
        IntField(
            IntField {
                i: 0,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
    "next_state": Field(
        IntField(
            IntField {
                i: 1,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
    "char": Field(
        IntField(
            IntField {
                i: 0,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
}
drop dead var: next_state_n0
CIRC CS []
RecursiveSNARK::prove_step 0: true
prover_data ProverData {
    r1cs: R1cs {
        modulus: IntField(
            28948022309329048855892746252171976963363056481941647379679742748393362948097,
        ),
        signal_idxs: {
            "next_state_n0": 0,
        },
        idxs_signals: {
            0: "next_state_n0",
        },
        next_idx: 1,
        public_idxs: {},
        constraints: [],
        terms: [
            (declare
             (
              (next_state (mod 28948022309329048855892746252171976963363056481941647379679742748393362948097))
             )
             (let
              (
              )
              
            next_state)
            )
            ,
        ],
    },
    precompute_inputs: {},
    precompute: PreComp {
        outputs: {
            "next_state_n0": (declare
             (
              (next_state (mod 28948022309329048855892746252171976963363056481941647379679742748393362948097))
             )
             (let
              (
              )
              
            next_state)
            )
            ,
        },
        sequence: [
            (
                "next_state_n0",
                Field(
                    IntField(
                        28948022309329048855892746252171976963363056481941647379679742748393362948097,
                    ),
                ),
            ),
        ],
        inputs: {
            (
                "next_state",
                Field(
                    IntField(
                        28948022309329048855892746252171976963363056481941647379679742748393362948097,
                    ),
                ),
            ),
        },
    },
}
wits {
    "char": Field(
        IntField(
            IntField {
                i: 0,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
    "next_state": Field(
        IntField(
            IntField {
                i: 2,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
    "current_state": Field(
        IntField(
            IntField {
                i: 1,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
}
extended wit {
    "next_state_n0": Field(
        IntField(
            IntField {
                i: 2,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
    "current_state": Field(
        IntField(
            IntField {
                i: 1,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
    "next_state": Field(
        IntField(
            IntField {
                i: 2,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
    "char": Field(
        IntField(
            IntField {
                i: 0,
                m: 28948022309329048855892746252171976963363056481941647379679742748393362948097,
            },
        ),
    ),
}
drop dead var: next_state_n0
CIRC CS []
RecursiveSNARK::prove_step 1: true
